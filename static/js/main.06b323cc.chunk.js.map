{"version":3,"sources":["translation/TranslationContext.tsx","translation/createTranslation.tsx","tubaAvatarSquare.png","UpperRightMenu.tsx","LanguageMenu.tsx","NavBar.tsx","theme.js","Drawer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["translations","defaultLangStr","initialState","lang","Object","keys","translation","setLang","TranslationContext","createContext","TranslationContextProvider","children","useState","setTranslation","useEffect","a","fetchedTranslation","default","document","documentElement","Provider","value","createTranslation","navigator","language","supportedLanguageList","module","exports","UpperRightMenu","React","anchorEl","setAnchorEl","history","useHistory","useContext","handleClose","IconButton","aria-controls","aria-haspopup","onClick","event","currentTarget","aria-label","edge","color","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","goBack","ListItemIcon","fontSize","upperRightMenu","lastPage","window","location","reload","forceReload","LanguageMenu","useLocation","queryStringLang","useMemo","URLSearchParams","search","get","Button","startIcon","entries","map","langCode","langName","key","selected","replace","pathname","handleMenuItemClick","useStyles","makeStyles","theme","menuButton","marginRight","spacing","title","flexGrow","NavBar","toggleDrawer","props","classes","AppBar","position","Toolbar","className","Typography","variant","createMuiTheme","palette","primary","main","secondary","type","list","width","orange","getContrastText","deepOrange","backgroundColor","Drawer","isDrawerOpened","SwipeableDrawer","onOpen","role","onKeyDown","List","ListItem","ListItemAvatar","Avatar","alt","src","avatarSource","ListItemText","drawer","name","department","Divider","button","component","Link","to","home","random","about","root","body","Home","lazy","RandomRestaurant","About","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","setDrawerState","isOpen","ThemeProvider","Suspense","fallback","loading","exact","path","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.06b323cc.chunk.js","sourcesContent":["import createTranslation from './createTranslation';\n\nconst { TranslationContext, TranslationContextProvider } = createTranslation({\n    'zh-TW': () => import('./zh-TW'),\n    'yue-HK': () => import('./yue-HK'),\n    'en-US': () => import('./en-US'),\n}, navigator.language);\n\nexport const supportedLanguageList: Record<string, string> = {\n    'zh-TW': '中文（臺灣）',\n    'yue-HK': '廣東話（香港）',\n    'en-US': 'English (US)',\n}\n\nexport { TranslationContext, TranslationContextProvider };","/**\n * Ref.: https://blog.usejournal.com/internationalization-with-react-hooks-af37bed9f195\n */\n\nimport React, { createContext, useState, useEffect } from 'react';\n\nexport interface TranslationsImport<T> {\n    [index: string]: () => Promise<{default: T}>;\n}\n\ninterface State<T> {\n    lang: string;\n    translation: T;\n    setLang: React.Dispatch<React.SetStateAction<string>>;// (lang: string) => void;\n}\n\nexport default function createTranslation<T> (\n    translations: TranslationsImport<T>,\n    defaultLangStr: string\n) {\n    const defaultLang = defaultLangStr in translations ? defaultLangStr : Object.keys(translations)[0];\n    const initialState: State<T> = {\n        lang: defaultLang,\n        translation: {} as T,\n        setLang: () => {},\n    }\n\n    const TranslationContext = createContext(initialState);\n\n    const TranslationContextProvider: React.FC = ({ children }) => {\n        const [lang, setLang] = useState(initialState.lang);\n        const [translation, setTranslation] = useState(initialState.translation)\n\n        useEffect(() => {\n            (async function IIAFE () {\n                if (lang in translations){\n                    const fetchedTranslation = await translations[lang]();\n                    setTranslation(fetchedTranslation.default);\n                    document.documentElement.lang = lang; // change <html lang> attr\n                }\n            })();\n        }, [lang, setTranslation]);\n\n        return <TranslationContext.Provider value={{ lang, translation, setLang }}>\n            {children}\n        </TranslationContext.Provider>;\n    }\n\n    return { TranslationContext, TranslationContextProvider };\n}","module.exports = __webpack_public_path__ + \"static/media/tubaAvatarSquare.7a16c612.png\";","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport { TranslationContext } from './translation/TranslationContext';\n\nexport default function UpperRightMenu() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const history = useHistory();\n\n  const { translation } = useContext(TranslationContext);\n\n  const handleClick: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleGoBack = () => {\n    handleClose();\n    history.goBack();\n  };\n\n  return (\n    <div>\n      <IconButton\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        aria-label=\"display more actions\"\n        edge=\"end\"\n        color=\"inherit\"\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleGoBack}>\n          <ListItemIcon>\n            <ArrowBackIcon fontSize=\"small\" />\n          </ListItemIcon>\n          {translation?.upperRightMenu?.lastPage}\n        </MenuItem>\n        <MenuItem onClick={() => window.location.reload(true)}>\n          <ListItemIcon>\n            <RefreshIcon fontSize=\"small\" />\n          </ListItemIcon>\n          {translation?.upperRightMenu?.forceReload}\n        </MenuItem>\n      </Menu>\n    </div>\n  );\n}\n","import React, { useContext, useMemo, useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport Button from '@material-ui/core/Button';\nimport TranslateIcon from '@material-ui/icons/Translate';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { TranslationContext, supportedLanguageList } from './translation/TranslationContext';\n\nexport default function LanguageMenu() {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n  const { lang, setLang } = useContext(TranslationContext);\n\n  \n  const location = useLocation();\n  const queryStringLang = useMemo(() => new URLSearchParams(location.search).get('lang'), [location.search]);\n  /* set lang only if query string is set, not vice-versa */\n  useEffect(() => {\n    if (queryStringLang && queryStringLang in supportedLanguageList) setLang(queryStringLang);\n  }, [queryStringLang, setLang]);\n  const history = useHistory();\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuItemClick = (event: React.MouseEvent<HTMLElement>, langCode: string) => {\n    setLang(langCode);\n    setAnchorEl(null);\n    history.replace(`${location.pathname}?lang=${langCode}`);\n  }\n\n  return (\n    <div>\n      <Button\n        aria-controls=\"language-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        aria-label=\"change language\"\n        color=\"inherit\"\n        startIcon={<TranslateIcon/>}\n      >\n        {supportedLanguageList[lang]}\n      </Button>\n      <Menu\n        id=\"language-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {Object.entries(supportedLanguageList).map(([langCode, langName]) => \n            <MenuItem \n                key={langCode}\n                selected={langCode === lang}\n                onClick={(event) => handleMenuItemClick(event, langCode)}\n            >\n              {langName}\n            </MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\n\nimport UpperRightMenu from './UpperRightMenu';\nimport LanguageMenu from './LanguageMenu';\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\ninterface NavBarProps {\n  title?: string;\n  color?: 'default' | 'inherit' | 'primary' | 'secondary' | 'transparent';\n  toggleDrawer: (isOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => void;\n}\n\nexport default function NavBar({ toggleDrawer, title = '...', color, ...props }: NavBarProps) {\n  const classes = useStyles();\n\n  return (\n    <>\n      <div {...props}>\n        <AppBar position=\"static\" color={color}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer(true)}\n            >\n              <MenuIcon />\n            </IconButton>\n            \n            <Typography variant=\"h6\" className={classes.title}>\n              {title}\n            </Typography>\n\n            <LanguageMenu />\n            <UpperRightMenu />\n          </Toolbar>\n        </AppBar>\n      </div>\n    </>\n  );\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst palette = {\n  primary: { main: \"#00796b\" },\n  secondary: { main: '#0288D1' },\n  type: 'dark',\n};\n\nexport default createMuiTheme({ palette });\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange } from '@material-ui/core/colors';\nimport avatarSource from './tubaAvatarSquare.png';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExploreIcon from '@material-ui/icons/Explore';\nimport InfoOutlined from '@material-ui/icons/InfoOutlined';\n\nimport { TranslationContext } from './translation/TranslationContext';\n\nconst useStyles = makeStyles((theme) => ({\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  list: {\n    width: 250,\n  },\n  orange: {\n    color: theme.palette.getContrastText(deepOrange[500]),\n    backgroundColor: deepOrange[500],\n  },\n}));\n\ninterface DrawerProps {\n  toggleDrawer(isOpen: boolean): (event: React.KeyboardEvent | React.MouseEvent) => void;\n  isDrawerOpened: boolean;\n}\n\nexport default function Drawer({ toggleDrawer, isDrawerOpened, ...props }: DrawerProps) {\n  const classes = useStyles();\n  const { translation } = useContext(TranslationContext);\n\n  return (\n    <>\n      <SwipeableDrawer\n        open={isDrawerOpened}\n        onClose={toggleDrawer(false)}\n        onOpen={toggleDrawer(true)}\n        {...props}\n      >\n        <div\n          className={classes.list}\n          role=\"presentation\"\n          onClick={toggleDrawer(false)}\n          onKeyDown={toggleDrawer(false)}\n        >\n          <List>\n            <ListItem>\n              <ListItemAvatar>\n                <Avatar alt=\"Fong Meng Iao\" className={classes.orange} src={avatarSource} />\n              </ListItemAvatar>\n              <ListItemText primary={translation?.drawer?.name} secondary={translation?.drawer?.department} />\n            </ListItem>\n\n            <Divider />\n\n            <ListItem button component={Link} to={(location: Object) => ({ ...location, pathname: '/' })}>\n              {' '}\n              {/* key={text} */}\n              <ListItemIcon><HomeIcon /></ListItemIcon>\n              <ListItemText primary={translation?.home?.title} />\n            </ListItem>\n            <ListItem button component={Link} to={(location: Object) => ({ ...location, pathname: '/random' })}>\n              {' '}\n              {/* key={text} */}\n              <ListItemIcon><ExploreIcon /></ListItemIcon>\n              <ListItemText primary={translation?.random?.title} />\n            </ListItem>\n            \n            <Divider />\n\n            <ListItem button component={Link} to={(location: Object) => ({ ...location, pathname: '/about' })}>\n              <ListItemIcon><InfoOutlined /></ListItemIcon>\n              <ListItemText primary={translation?.about?.title} />\n            </ListItem>\n            {/*\n            <ListItem button component={Link} to=\"/testing\">\n              <ListItemIcon><MailIcon /></ListItemIcon>\n              <ListItemText primary=\"測試中\" />\n            </ListItem>\n            */}\n          </List>\n        </div>\n      </SwipeableDrawer>\n    </>\n  );\n}\n","import React, { useContext } from 'react';\nimport {\n  Switch,\n  Route,\n  Redirect,\n  // Link\n} from 'react-router-dom';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport NavBar from './NavBar';\nimport theme from './theme';\nimport Drawer from './Drawer';\n\nimport { TranslationContext } from './translation/TranslationContext';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    // backgroundColor: theme.palette.background.paper,\n    position: 'relative',\n    // minHeight: '100vh',\n    // display: 'flex',\n    // backgroundColor: '#000000', // theme.palette.grey['900']\n  },\n  '@global': {\n    body: {\n      backgroundColor: '#000000',\n    },\n  },\n}));\n\n// Lazy loading\nconst Home = React.lazy(() => import('./Home/Home'));\nconst RandomRestaurant = React.lazy(() => import('./RandomRestaurant/Random'));\nconst About = React.lazy(() => import('./About/About'));\n\nexport default function () {\n  const classes = useStyles();\n  const { translation } = useContext(TranslationContext);\n  const [isDrawerOpened, setDrawerState] = React.useState(false);\n  const toggleDrawer = (isOpen: boolean) => (event: React.KeyboardEvent | React.MouseEvent) => {\n    if (event && event.type === 'keydown' && ((event as React.KeyboardEvent).key === 'Tab' || (event as React.KeyboardEvent).key === 'Shift')) {\n      return;\n    }\n    setDrawerState(isOpen);\n  };\n  return (\n      <ThemeProvider theme={theme}>\n          <div className={classes.root}>\n            <Drawer toggleDrawer={toggleDrawer} isDrawerOpened={isDrawerOpened} />\n            <React.Suspense fallback={<NavBar toggleDrawer={toggleDrawer} title={translation?.loading} />}>\n              <Switch>\n                <Route exact path=\"/\">\n                  <NavBar toggleDrawer={toggleDrawer} title={translation?.home?.title} />\n                  <Home />\n                </Route>\n                <Route path=\"/random\">\n                  <NavBar toggleDrawer={toggleDrawer} title={translation?.random?.title} />\n                  <RandomRestaurant />\n                </Route>\n                <Route path=\"/about\">\n                  <NavBar toggleDrawer={toggleDrawer} title={translation?.about?.title} />\n                  <About />\n                </Route>\n                {/* Redirect all 404's to home */}\n                <Redirect to=\"/\" />\n              </Switch>\n            </React.Suspense>\n          </div>\n      </ThemeProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n    // BrowserRouter as Router\n    HashRouter as Router,\n} from 'react-router-dom';\n\nimport { TranslationContextProvider } from './translation/TranslationContext';\n\nReactDOM.render(\n    // If using BrowserRouter instead of HashRouter, add this prop: basename={process.env.PUBLIC_URL}\n    <Router><TranslationContextProvider><App /></TranslationContextProvider></Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}