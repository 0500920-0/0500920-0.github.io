{"version":3,"sources":["PeriodicTable/PeriodicTable.tsx"],"names":["ElementCell","React","lazy","useStyle","makeStyles","theme","table","padding","spacing","display","gridTemplateColumns","justifyItems","gridTemplateRows","alignItem","gridGap","description","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","width","height","justifyContent","alignItems","transform","PeriodicTable","classes","useState","descriptionIdx","setIdx","periodicTable","setTable","handleHover","idx","evt","useEffect","then","res","default","elements","slice","className","data","map","item","onMouseEnter","key","style","xpos","ypos","elementCellProps"],"mappings":"sNAOA,MAAMA,EAAcC,IAAMC,KAAK,IAAM,+BAE/BC,EAAWC,YAAYC,IAAD,CACxBC,MAAO,CAKHC,QAASF,EAAMG,QAAQ,GACvBC,QAAS,cACTC,oBAAqB,kBACrBC,aAAc,SACdC,iBAAiB,oCACjBC,UAAW,SACXC,QAAST,EAAMG,QAAQ,IAE3BO,YAAa,CAITC,gBAAiB,EACjBC,cAAe,GACfC,aAAc,EACdC,WAAY,EACZC,MAAO,OACPC,OAAQ,OACRZ,QAAS,OACTa,eAAgB,SAChBC,WAAY,SACZ,UAAW,CACPC,UAAW,gBAQR,SAASC,IACpB,MAAMC,EAAUvB,IADqB,EAEJwB,mBAAS,GAFL,mBAE9BC,EAF8B,KAEdC,EAFc,OAIHF,mBAAS,IAJN,mBAI9BG,EAJ8B,KAIfC,EAJe,KAqBrC,SAASC,EAAaC,GAClB,OAAO,SAAUC,GACbL,EAAOI,IAkBf,OApCAE,oBAAU,KAIN,mCACKC,KAAMC,GAAQA,EAAIC,QAAQC,SAASC,MAAM,EAAG,MAC5CJ,KAAMC,GAAQN,EAASM,KAQ7B,IAsBI,oCAEH,yBAAKI,UAAWf,EAAQpB,OACpB,yBAAKmC,UAAWf,EAAQX,aAAxB,IACKe,EAAcF,IAAmB,kBAAC5B,EAAD,CAAa0C,KAAMZ,EAAcF,MAGnEE,EACKa,IAAI,CAACC,EAAMX,IAAQ,kBAACjC,EAtBrC,SAA2B0C,EAAeT,GACtC,MAAO,CACHY,aAAcb,EAAYC,GAC1BS,OACAI,IAAKb,EACLc,MAAO,CACH/B,gBAAiB0B,EAAKM,KACtB/B,cAAeyB,EAAKM,KAAO,EAC3B9B,aAAcwB,EAAKO,KACnB9B,WAAYuB,EAAKO,KAAO,IAaiBC,CAAiBN,EAAMX","file":"static/js/7.35e5f045.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n// import { blueGrey, grey } from '@material-ui/core/colors';\n\n// import ElementCell from './ElementCell';\n// import Paper from '@material-ui/core/Paper';\n\nconst ElementCell = React.lazy(() => import('./ElementCell'));\n\nconst useStyle = makeStyles((theme) => ({\n    table: {\n        /**\n         * To make the right padding shown normally, display should be inline\n         * Ref.: https://stackoverflow.com/questions/50236753/padding-right-or-margin-right-for-content-that-exceeds-page-width-body-viewport\n         */\n        padding: theme.spacing(2),\n        display: 'inline-grid',\n        gridTemplateColumns: 'repeat(18, 2fr)',\n        justifyItems: 'center',\n        gridTemplateRows: `repeat(7, 2fr) 1fr repeat(2, 2fr)`,\n        alignItem: 'center',\n        gridGap: theme.spacing(2),\n    },\n    description: {\n        // backgroundColor: theme.palette.type === 'dark' ? blueGrey[900] : grey[100],\n        // transition: `all ${theme.transitions.duration.shortest}ms ease-in`,\n\n        gridColumnStart: 6,\n        gridColumnEnd: 10,\n        gridRowStart: 1,\n        gridRowEnd: 4,\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        '& > div': {\n            transform: 'scale(2)',\n        },\n    },\n}));\n\ntype Element = import('./PeriodicTableJSON').Element\n// type Element = import('./periodic-table-api').Element\n\nexport default function PeriodicTable () {\n    const classes = useStyle();\n    const [descriptionIdx, setIdx] = useState(0);\n\n    const [periodicTable, setTable] = useState([] as Element[]);\n    useEffect(() => {\n        // fetch('https://raw.githubusercontent.com/Bowserinator/Periodic-Table-JSON/master/PeriodicTableJSON.json')\n        //     .then((res) => res.json())\n        //     .then((res) => setTable(res.elements.slice(0, 118) as Element[]));\n        import('./PeriodicTableJSON.json')\n            .then((res) => res.default.elements.slice(0, 118) as Element[])\n            .then((res) => setTable(res))\n\n        // fetch('https://periodic-table-api.herokuapp.com/')\n        //     .then((res) => res.json())\n        //     .then((res) => setTable(res as Element[]));\n        // import('./periodic-table-api.json')\n        //     .then((res) => res.default as Element[])\n        //     .then((res) => setTable(res))\n    }, []);\n\n    function handleHover (idx: number) {\n        return function (evt: React.MouseEvent) {\n            setIdx(idx);\n        }\n    }\n\n    function elementCellProps (data: Element, idx: number) {\n        return {\n            onMouseEnter: handleHover(idx),\n            data,\n            key: idx,\n            style: {\n                gridColumnStart: data.xpos,\n                gridColumnEnd: data.xpos + 1,\n                gridRowStart: data.ypos,\n                gridRowEnd: data.ypos + 1,\n            },\n        };\n    }\n\n    return <>\n        {/* <NavBar {...NavBarProps} /> */}\n        <div className={classes.table}>\n            <div className={classes.description}> {/* Paper elevation={0} */}\n                {periodicTable[descriptionIdx] && <ElementCell data={periodicTable[descriptionIdx]}/>}\n            </div>\n            {\n                periodicTable\n                    .map((item, idx) => <ElementCell {...elementCellProps(item, idx)} />)\n            }\n        </div>\n    </>;\n}"],"sourceRoot":""}